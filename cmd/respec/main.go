package main

import (
	"encoding/json" // Add this import for JSON output
	"fmt"
	"os"
	"strings" // Add this import for checking file extensions

	"github.com/Zachacious/go-respec/internal/analyzer"
	"github.com/Zachacious/go-respec/internal/assembler"
	"github.com/Zachacious/go-respec/internal/config"
	"github.com/spf13/cobra"
	"gopkg.in/yaml.v3"
)

var (
	version = "dev"
	commit  = "none"
	date    = "unknown"
)

// --- START: Default .respec.yaml content ---
const defaultRespecYAML = `# .respec.yaml - Configuration for the respec OpenAPI generator

# High-level information for your OpenAPI specification.
info:
  title: "Untitled API"
  version: "1.0.0"
  description: "A new API generated by respec."

# Defines the security mechanisms your API uses (e.g., JWT, API Keys).
securitySchemes:
  BearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT

# Teaches respec the routing syntax of your web framework.
# Defaults for chi/v5 and gin-gonic/gin are built-in.
# Only uncomment and modify this section if you use a different framework.
# routerDefinitions:
#   - type: "github.com/go-chi/chi/v5.Mux"
#     endpointMethods: ["Get", "Post", "Put", "Patch", "Delete", "Head", "Options", "Trace"]
#     groupMethods: ["Route", "Group"]
#     middlewareWrapperMethods: ["With", "Use"]

# Teaches respec to infer details from your project's custom helper functions.
# Defaults for the standard library and common frameworks are built-in.
# handlerPatterns:
#   requestBody:
#     - functionPath: "path/to/my/utils.BindRequest"
#       argIndex: 0
#   responseBody:
#     - functionPath: "path/to/my/utils.RespondWithJSON"
#       statusCodeIndex: 1
#       dataIndex: 2
#       descriptionIndex: -1 # Use -1 if no description argument

# Maps function calls found in middleware to the security schemes defined above.
# securityPatterns:
#   - functionPath: "path/to/my/auth.ValidateToken"
#     schemeName: "BearerAuth"
`

// --- END: Default .respec.yaml content ---

func main() {
	var outputPath string

	var rootCmd = &cobra.Command{
		Use:   "respec [path]",
		Short: "respec is a Go static analysis tool to generate OpenAPI specs without magic comments.",
		Long:  `...`, // Long description unchanged
		Args:  cobra.MaximumNArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			projectPath := "."
			if len(args) > 0 {
				projectPath = args[0]
			}

			fmt.Printf("Starting analysis of project at: %s\n", projectPath)
			cfg, err := config.Load(projectPath)
			if err != nil {
				fmt.Fprintf(os.Stderr, "Error loading .respec.yaml: %v\n", err)
				os.Exit(1)
			}
			fmt.Println("Configuration loaded.")

			apiModel, err := analyzer.Analyze(projectPath, cfg)
			if err != nil {
				fmt.Fprintf(os.Stderr, "Error during analysis: %v\n", err)
				os.Exit(1)
			}
			fmt.Println("Analysis complete. Assembling specification...")

			spec, err := assembler.BuildSpec(apiModel, cfg)
			if err != nil {
				fmt.Fprintf(os.Stderr, "Error assembling specification: %v\n", err)
				os.Exit(1)
			}

			// --- START: JSON or YAML Output Logic ---
			var outputData []byte
			// Check the output file extension to determine the format.
			if strings.HasSuffix(strings.ToLower(outputPath), ".json") {
				fmt.Println("Marshalling spec to JSON...")
				outputData, err = json.MarshalIndent(spec, "", "  ")
			} else {
				fmt.Println("Marshalling spec to YAML...")
				outputData, err = yaml.Marshal(spec)
			}

			if err != nil {
				fmt.Fprintf(os.Stderr, "Error marshalling spec: %v\n", err)
				os.Exit(1)
			}
			// --- END: JSON or YAML Output Logic ---

			err = os.WriteFile(outputPath, outputData, 0644)
			if err != nil {
				fmt.Fprintf(os.Stderr, "Error writing output file: %v\n", err)
				os.Exit(1)
			}
			fmt.Printf("Successfully generated OpenAPI spec at: %s\n", outputPath)
		},
	}

	var versionCmd = &cobra.Command{
		// ... version command unchanged
	}

	// --- START: New `init` Command ---
	var initCmd = &cobra.Command{
		Use:   "init",
		Short: "Create a default .respec.yaml configuration file",
		Long:  "Creates a default .respec.yaml file in the current directory. This file contains examples and documentation for all configuration options.",
		Run: func(cmd *cobra.Command, args []string) {
			configFileName := ".respec.yaml"
			if _, err := os.Stat(configFileName); err == nil {
				fmt.Fprintf(os.Stderr, "Error: '%s' already exists in the current directory. Aborting.\n", configFileName)
				os.Exit(1)
			}

			err := os.WriteFile(configFileName, []byte(defaultRespecYAML), 0644)
			if err != nil {
				fmt.Fprintf(os.Stderr, "Error writing %s: %v\n", configFileName, err)
				os.Exit(1)
			}
			fmt.Printf("âœ… Successfully created '%s'.\n", configFileName)
		},
	}
	// --- END: New `init` Command ---

	rootCmd.AddCommand(versionCmd)
	rootCmd.AddCommand(initCmd) // Add the new command to the root

	rootCmd.Flags().StringVarP(&outputPath, "output", "o", "openapi.yaml", "Output file for the OpenAPI specification (e.g., openapi.yaml or openapi.json)")

	if err := rootCmd.Execute(); err != nil {
		os.Exit(1)
	}
}
